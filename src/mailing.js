const fs = require("fs");
const { google } = require("googleapis");
const { subscribers, host, PROVIDER_TOKEN } = JSON.parse(fs.readFileSync("./config/config.json"));
const path = require("path");
const configPath = path.resolve("config/config.json");
const labelModifier = require("./modify");
const getAttachmentData = require("./attachments").getAttachmentData;
const messageProvider = require("./message.js");
const hasToken = require("./authorize").hasToken;

module.exports.mailMessagesToSubscribers = function mailMessagesToSubscribers(auth) {
  console.log("Check unread messages");
  const gmail = google.gmail({ version: "v1", auth });
  messageProvider.getUnreadMessages(gmail).then(response => {
    const { data } = response;
    if (data.messages) {
      data.messages.forEach(async msg => {
        let currentMsg = await messageProvider.getMessageData(gmail, msg);
        const isProvider = await messageProvider.isProvider(gmail, msg);
        console.log(`Is author's msg provider ? He is ${isProvider ? "yes" : "no"}`);
        if (currentMsg.data && hasToken(currentMsg, PROVIDER_TOKEN) && !isProvider) {
          console.log("Overwriting existing config");
          const content = JSON.parse(fs.readFileSync(configPath));
          content.providers.push(await messageProvider.getMessageAuthor(gmail, msg));
          fs.writeFileSync(configPath, JSON.stringify(content));
        }
        if (currentMsg.data && isProvider) {
          console.log("Starting messaging subscribers...");
          subscribers.forEach(sub => {
            sendMessage(gmail, sub, currentMsg);
          });
        }
      });
    } else {
      console.log("There was no new messages");
    }
  });
};

async function sendMessage(gmail, user, msg) {
  const { data } = msg;
  const message = await prepareMessage(gmail, data, user, host);
  // The body needs to be base64url encoded.
  const encodedMessage = Buffer.from(message)
    .toString("base64")
    .replace(/\+/g, "-")
    .replace(/\//g, "_")
    .replace(/=+$/, "");

  await gmail.users.messages
    .send({
      userId: "me",
      requestBody: {
        raw: encodedMessage
      },
      threadId: data.threadId
    })
    .then(currentMsg => {
      console.log(`Send message ${currentMsg.data.id} to ${user.email} from ${host.email}`);
      labelModifier.removeLabels(gmail, msg.data, ["UNREAD"]);
    })
    .catch(err => {
      console.log("Didn't send message");
      console.error(err);
    });
}

async function prepareMessage(gmail, data, user, host) {
  const metadataHeaders = data.payload.headers;
  metadataHeaders[metadataHeaders.findIndex(header => header.name === "To")] = {
    name: "To",
    value: `${user.firstName} ${user.lastName} <${user.email}>`
  };

  metadataHeaders[metadataHeaders.findIndex(header => header.name === "From")] = {
    name: "From",
    value: `<${host.email}>`
  };

  const messageParts = metadataHeaders.map(header => {
    return `${header.name}: ${header.value}`;
  });

  const boundary = data.payload.headers
    .find(header => header.name === "Content-Type")
    .value.split(";")[1]
    .trim()
    .split("boundary=")[1]
    .replace(/["]/g, "");
  let messages = [];
  for (const attachment of data.payload.parts) {
    const mimes = attachment.headers;
    messageParts.push(`--${boundary}`);
    mimes.forEach(mime => messageParts.push(`${mime.name}: ${mime.value}`));
    if (attachment.mimeType.includes("plain")) {
      messages.push(Buffer.from(attachment.body.data, "base64").toString());
    }
    if (attachment.body.attachmentId) {
      const response = await getAttachmentData(gmail, data.id, attachment.body.attachmentId);
      const tempFile = __dirname + "/temp";
      fs.writeFileSync(tempFile, Buffer.from(response.data.data, "base64"));
      messageParts.push(fs.readFileSync(tempFile, { encoding: "base64" }));
      fs.unlinkSync(tempFile);
    }
    messageParts.push("");
  }
  if (messages) {
    messages = messages.join("\n");
  }
  messageParts.push(`--${boundary}`);
  messageParts.push("Content-Type: text/plain; charset='UTF-8'");
  messageParts.push("Content-Transfer-Encoding: base64");
  messageParts.push("This message has been autogenerated. Do not reply");
  messageParts.push(`--${boundary}--`);

  const msg = messageParts.join("\n");
  return msg;
}

module.exports.sendMessage = sendMessage;
